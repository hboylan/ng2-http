{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  URLSearchParams,\n  Headers as AngularHeaders,\n  RequestOptions,\n  Request\n} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {RESTClient} from './rest.service';\nimport 'rxjs/add/operator/mergeMap';\n\n/**\n* Builds custom descriptors\n*\n* @class Builder\n*/\nexport class Builder {\n\n  // Store request parameters\n  public static param(paramName: string) {\n    return function(key: string) {\n      return function(target: RESTClient, propertyKey: string | symbol, parameterIndex: number) {\n        var metadataKey = `${propertyKey}_${paramName}_parameters`;\n        var paramObj: any = {\n          key: key,\n          parameterIndex: parameterIndex\n        };\n        if (Array.isArray(target[metadataKey])) {\n          target[metadataKey].push(paramObj);\n        } else {\n          target[metadataKey] = [paramObj];\n        }\n      };\n    };\n  }\n\n  // perform HTTP request\n  public static method(method: number) {\n    return function(url: string) {\n      return function(target: RESTClient, propertyKey: string, descriptor: any) {\n\n        var pPath = target[`${propertyKey}_Path_parameters`];\n        var pQuery = target[`${propertyKey}_Query_parameters`];\n        var pBody = target[`${propertyKey}_Body_parameters`];\n        var pHeader = target[`${propertyKey}_Header_parameters`];\n\n        descriptor.value = function(...args: any[]) {\n\n          // Path\n          var resUrl: string = url;\n          if (pPath) {\n            for (var k in pPath) {\n              if (pPath.hasOwnProperty(k)) {\n                resUrl = resUrl.replace('{' + pPath[k].key + '}', args[pPath[k].parameterIndex]);\n              }\n            }\n          }\n\n          // Query\n          var search = new URLSearchParams();\n          if (pQuery) {\n            pQuery\n            .filter(p => args[p.parameterIndex]) // filter out optional parameters\n            .forEach(p => {\n              var key = p.key;\n              var value = args[p.parameterIndex];\n              // if the value is a instance of Object, we stringify it\n              if (value instanceof Object) {\n                value = JSON.stringify(value);\n              }\n              search.set(key, value);\n            });\n          }\n\n          // Headers\n          // set class default headers\n          var headers = new AngularHeaders(this.getDefaultHeaders());\n          // set method specific headers\n          for (var k in descriptor.headers) {\n              if (descriptor.headers.hasOwnProperty(k)) {\n                  headers.append(k, descriptor.headers[k]);\n              }\n          }\n          // set parameter specific headers\n          if (pHeader) {\n            for (var k in pHeader) {\n              if (pHeader.hasOwnProperty(k)) {\n                headers.append(pHeader[k].key, args[pHeader[k].parameterIndex]);\n              }\n            }\n          }\n\n          // Body\n          var urlencoded = headers.get('Content-Type');\n          var body = null;\n          if (pBody) {\n            if (urlencoded && urlencoded === 'application/x-www-form-urlencoded') {\n              body = args[pBody[0].parameterIndex];\n            } else {\n              body = JSON.stringify(args[pBody[0].parameterIndex]);\n            }\n          }\n\n          // Request options\n          var options = new RequestOptions({\n            method,\n            url: this.getBaseUrl() + resUrl,\n            headers,\n            body,\n            search,\n            withCredentials: this.withCredentials\n          });\n\n          // intercept the request\n          return this.requestInterceptor(new Request(options))\n            .mergeMap(req => {\n\n              // make the request and store the observable for later transformation\n              var observable: Observable<any> = this.http.request(req);\n\n              // global response interceptor\n              observable = this.responseInterceptor(observable);\n\n              // transform the obserable in accordance to the @Produces decorator\n              if (descriptor.producer) {\n                observable = observable.map(descriptor.producer);\n              }\n\n              return observable;\n            });\n        };\n\n        return descriptor;\n      };\n    };\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}