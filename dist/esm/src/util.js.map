{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  URLSearchParams,\n  Headers as AngularHeaders,\n  RequestOptions,\n  Request\n} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {RESTClient} from './rest.service';\nimport 'rxjs/add/operator/mergeMap';\n\n\n// Store request parameters\nexport function param(paramName: string) {\n  return function(key: string) {\n    return function(target: RESTClient, propertyKey: string | symbol, parameterIndex: number) {\n      var metadataKey = `${propertyKey}_${paramName}_parameters`;\n      var paramObj: any = {\n        key: key,\n        parameterIndex: parameterIndex\n      };\n      if (Array.isArray(target[metadataKey])) {\n        target[metadataKey].push(paramObj);\n      } else {\n        target[metadataKey] = [paramObj];\n      }\n    };\n  };\n}\n\n  // perform HTTP request\nexport function method(method: number) {\n  return function(url: string) {\n    return function(target: RESTClient, propertyKey: string, descriptor: any) {\n\n      var pPath = target[`${propertyKey}_Path_parameters`];\n      var pQuery = target[`${propertyKey}_Query_parameters`];\n      var pBody = target[`${propertyKey}_Body_parameters`];\n      var pHeader = target[`${propertyKey}_Header_parameters`];\n\n      descriptor.value = function(...args: any[]) {\n\n        // Path\n        var resUrl: string = url;\n        if (pPath) {\n          for (var k in pPath) {\n            if (pPath.hasOwnProperty(k)) {\n              resUrl = resUrl.replace('{' + pPath[k].key + '}', args[pPath[k].parameterIndex]);\n            }\n          }\n        }\n\n        // Query\n        var search = new URLSearchParams();\n        if (pQuery) {\n          pQuery\n          .filter(p => typeof args[p.parameterIndex] !== 'undefined') // filter out optional parameters\n          .forEach(p => {\n            var key = p.key;\n            var value = args[p.parameterIndex];\n            // if the value is a instance of Object, we stringify it\n            if (value instanceof Object && key === 'object') {\n              for (let property in value) {\n                if (value.hasOwnProperty(property)) {\n                  search.set(property, value[property]);\n                }\n              }\n            } else {\n              search.set(key, value);\n            }\n          });\n        }\n\n        // Headers\n        // set class default headers\n        var headers = new AngularHeaders(this.getDefaultHeaders());\n        // set method specific headers\n        for (let j in descriptor.headers) {\n            if (descriptor.headers.hasOwnProperty(j)) {\n                headers.append(j, descriptor.headers[j]);\n            }\n        }\n        // set parameter specific headers\n        if (pHeader) {\n          for (let k in pHeader) {\n            if (pHeader.hasOwnProperty(k)) {\n              headers.append(pHeader[k].key, args[pHeader[k].parameterIndex]);\n            }\n          }\n        }\n\n        // Body\n        var contentType = headers.get('Content-Type');\n        var body = null;\n        if (pBody) {\n          if (contentType && contentType === 'application/json') {\n            body = JSON.stringify(args[pBody[0].parameterIndex]);\n          } else {\n            body = args[pBody[0].parameterIndex];\n          }\n        }\n\n        // Request options\n        var options = new RequestOptions({\n          method,\n          url: this.getBaseUrl() + resUrl,\n          headers,\n          body,\n          search,\n          withCredentials: this.withCredentials\n        });\n\n        // intercept the request\n        return this.requestInterceptor(new Request(options))\n          .mergeMap(req => {\n\n            // make the request and store the observable for later transformation\n            var observable: Observable<any> = this.http.request(req);\n\n            // global response interceptor\n            observable = this.responseInterceptor(observable);\n\n            // transform the obserable in accordance to the @Produces decorator\n            if (descriptor.producer) {\n              observable = observable.map(descriptor.producer);\n            }\n\n            return observable;\n          });\n      };\n\n      return descriptor;\n    };\n  };\n}\n"]}