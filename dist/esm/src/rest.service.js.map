{"version":3,"file":"rest.service.js","sourceRoot":"","sources":["../../../src/rest.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,IAAI,EACJ,OAAO,IAAI,cAAc,EACzB,OAAO,EACP,cAAc,EACd,aAAa,IAAI,cAAc,EAC/B,QAAQ,EACR,eAAe,EAChB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAC3C,OAAO,uBAAuB,CAAC;AAC/B,OAAO,wBAAwB,CAAC;AAChC,OAAO,EAAC,KAAK,EAAE,MAAM,EAAC,MAAM,QAAQ,CAAC;;;;;;;;;;;;;;IAYnC,oBAA2C;QAAA,SAAI,GAAJ,IAAI;KAAU;IAE/C,+BAAU,GAApB;QACE,EAAE,CAAC,CAAC,cAAc,CAAC;YAAC,EAAE,CAAC,CAAC,cAAc,CAAC;gBAAC,EAAE,CAAC,CAAC,eAAe,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC;QACzE,MAAM,CAAC,SAAS,CAAC;KAClB;IAAA,CAAC;IAEQ,sCAAiB,GAA3B;QACE,MAAM,CAAC,IAAI,CAAC;KACb;IAAA,CAAC;IAEF;;;;;MAKE;;;;;;;IACQ,uCAAkB;;;;;;IAA5B,UAA6B,GAAY;QACvC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;KAC3B;IAED;;;;;;MAME;;;;;;;;IACQ,wCAAmB;;;;;;;IAA7B,UAA8B,GAAyB;QACrD,MAAM,CAAC,GAAG,CAAC;KACZ;qBAvDH;;;;;;;;;;;;;AA8DA,MAAM,kBAAkB,GAAW;IACjC,MAAM,CAAC,UAAsC,MAAiB;QAC5D,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG;YAC5B,MAAM,CAAC,GAAG,CAAC;SACZ,CAAC;QACF,MAAM,CAAC,MAAM,CAAC;KACf,CAAC;CACH;;;;;AAMD,MAAM,yBAAyB,OAAY;IACzC,MAAM,CAAC,UAAsC,MAAiB;QAC5D,MAAM,CAAC,SAAS,CAAC,iBAAiB,GAAG;YACnC,MAAM,CAAC,OAAO,CAAC;SAChB,CAAC;QACF,MAAM,CAAC,MAAM,CAAC;KACf,CAAC;CACH;;;;;AAOD,MAAM,kBAAkB,UAAe;IACrC,MAAM,CAAC,UAAS,MAAkB,EAAE,WAAmB,EAAE,UAAe;QACtE,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,UAAU,CAAC;KACnB,CAAC;CACH;;;;AAMD,MAAM,mBAAsB,WAAoC;IAC9D,MAAM,CAAC,UAAS,MAAkB,EAAE,WAAmB,EAAE,UAAe;QACtE,UAAU,CAAC,QAAQ,GAAG,UAAC,GAAa;YAClC,IAAI,IAAI,CAAC;YACT,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;aACzB;YACD,MAAM,CAAC,IAAI,IAAO,GAAG,CAAC,IAAI,EAAE,CAAA;SAC7B,CAAC;QACF,MAAM,CAAC,UAAU,CAAC;KACnB,CAAC;CACH;;;;;AAOD,MAAM,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;;;;;AAKhC,MAAM,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;;;;;AAKlC,MAAM,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;;;;;AAKxC,MAAM,CAAC,IAAI,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;;;;;AAMpC,MAAM,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;;;;;AAK5C,MAAM,CAAC,IAAI,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;;;;AAK9C,MAAM,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;;;;;AAK5C,MAAM,CAAC,IAAI,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;;;;;AAKlD,MAAM,CAAC,IAAI,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;;;;AAK9C,MAAM,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import {\n  Http,\n  Headers as AngularHeaders,\n  Request,\n  RequestOptions,\n  RequestMethod as RequestMethods,\n  Response,\n  URLSearchParams\n} from '@angular/http';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\nimport {param, method} from './util';\n\n/**\n* Angular 2 RESTClient class.\n*\n* @class RESTClient\n* @constructor\n*/\n@Injectable()\nexport class RESTClient {\n  public withCredentials: boolean = false;\n\n  public constructor(@Inject(Http) protected http: Http) {}\n\n  protected getBaseUrl(): string {\n    if (AngularHeaders) if (RequestOptions) if (URLSearchParams) return null;   // this is to quash unused imports messages\n    return undefined;\n  };\n\n  protected getDefaultHeaders(): Object {\n    return null;\n  };\n\n  /**\n  * Request Interceptor\n  *\n  * @method requestInterceptor\n  * @param {Request} req - request object\n  */\n  protected requestInterceptor(req: Request): Observable<Request> {\n    return Observable.of(req);\n  }\n\n  /**\n  * Response Interceptor\n  *\n  * @method responseInterceptor\n  * @param {Response} res - response object\n  * @returns {Response} res - transformed response object\n  */\n  protected responseInterceptor(res: Observable<Response>): Observable<Response> {\n    return res;\n  }\n}\n\n/**\n * Set the base URL of REST resource\n * @param {String} url - base URL\n */\nexport function BaseUrl(url: string) {\n  return function <TFunction extends Function>(Target: TFunction): TFunction {\n    Target.prototype.getBaseUrl = function() {\n      return url;\n    };\n    return Target;\n  };\n}\n\n/**\n * Set default headers for every method of the RESTClient\n * @param {Object} headers - deafult headers in a key-value pair\n */\nexport function DefaultHeaders(headers: any) {\n  return function <TFunction extends Function>(Target: TFunction): TFunction {\n    Target.prototype.getDefaultHeaders = function() {\n      return headers;\n    };\n    return Target;\n  };\n}\n\n\n/**\n * Set custom headers for a REST method\n * @param {Object} headersDef - custom headers in a key-value pair\n */\nexport function Headers(headersDef: any) {\n  return function(target: RESTClient, propertyKey: string, descriptor: any) {\n    descriptor.headers = headersDef;\n    return descriptor;\n  };\n}\n\n\n/**\n * Defines the type(s) that the responses can produce\n */\nexport function Produces<T>(interceptor?: (res: Response) => any) {\n  return function(target: RESTClient, propertyKey: string, descriptor: any) {\n    descriptor.producer = (res: Response): any => {\n      let data;\n      if (interceptor) {\n        data = interceptor(res);\n      }\n      return data || <T>res.json()\n    };\n    return descriptor;\n  };\n}\n\n\n/**\n * Path variable of a method's url, type: string\n * @param {string} key - path key to bind value\n */\nexport let Path = param('Path');\n/**\n * Query value of a method's url, type: string\n * @param {string} key - query key to bind value\n */\nexport let Query = param('Query');\n/**\n * Body of a REST method, type: key-value pair object\n * Only one body per method!\n */\nexport let Body = param('Body')('Body');\n/**\n * Custom header of a REST method, type: string\n * @param {string} key - header key to bind value\n */\nexport let Header = param('Header');\n\n/**\n * GET method\n * @param {string} url - resource url of the method\n */\nexport let GET = method(RequestMethods.Get);\n/**\n * POST method\n * @param {string} url - resource url of the method\n */\nexport let POST = method(RequestMethods.Post);\n/**\n * PUT method\n * @param {string} url - resource url of the method\n */\nexport let PUT = method(RequestMethods.Put);\n/**\n * DELETE method\n * @param {string} url - resource url of the method\n */\nexport let DELETE = method(RequestMethods.Delete);\n/**\n * HEAD method\n * @param {string} url - resource url of the method\n */\nexport let HEAD = method(RequestMethods.Head);\n/**\n * PATCH method\n * @param {string} url - resource url of the method\n */\nexport let PATCH = method(RequestMethods.Patch);\n"]}