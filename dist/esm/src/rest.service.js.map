{"version":3,"sources":["../../../src/rest.service.ts"],"names":[],"mappings":"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","file":"rest.service.js","sourceRoot":"","sourcesContent":["import {\n  Http,\n  Headers as AngularHeaders,\n  Request,\n  RequestOptions,\n  RequestMethod as RequestMethods,\n  Response,\n  URLSearchParams\n} from '@angular/http';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\nimport {param, method} from './util';\n\n/**\n* Angular 2 RESTClient class.\n*\n* @class RESTClient\n* @constructor\n*/\n\nexport class RESTClient {\n  public withCredentials: boolean = false;\n\n  public constructor( protected http: Http) {}\n\n  protected getBaseUrl(): string {\n    if (AngularHeaders) if (RequestOptions) if (URLSearchParams) return null;   // this is to quash unused imports messages\n    return undefined;\n  };\n\n  protected getDefaultHeaders(): Object {\n    return null;\n  };\n\n  /**\n  * Request Interceptor\n  *\n  * @method requestInterceptor\n  * @param {Request} req - request object\n  */\n  protected requestInterceptor(req: Request): Observable<Request> {\n    return Observable.of(req);\n  }\n\n  /**\n  * Response Interceptor\n  *\n  * @method responseInterceptor\n  * @param {Response} res - response object\n  * @returns {Response} res - transformed response object\n  */\n  protected responseInterceptor(res: Observable<Response>): Observable<Response> {\n    return res;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Inject, args: [Http, ] }, ]},\n];\n}\n\n/**\n * Set the base URL of REST resource\n * @param {String} url - base URL\n */\nexport function BaseUrl(url: string) {\n  return function <TFunction extends Function>(Target: TFunction): TFunction {\n    Target.prototype.getBaseUrl = function() {\n      return url;\n    };\n    return Target;\n  };\n}\n\n/**\n * Set default headers for every method of the RESTClient\n * @param {Object} headers - deafult headers in a key-value pair\n */\nexport function DefaultHeaders(headers: any) {\n  return function <TFunction extends Function>(Target: TFunction): TFunction {\n    Target.prototype.getDefaultHeaders = function() {\n      return headers;\n    };\n    return Target;\n  };\n}\n\n\n/**\n * Set custom headers for a REST method\n * @param {Object} headersDef - custom headers in a key-value pair\n */\nexport function Headers(headersDef: any) {\n  return function(target: RESTClient, propertyKey: string, descriptor: any) {\n    descriptor.headers = headersDef;\n    return descriptor;\n  };\n}\n\n\n/**\n * Defines the type(s) that the responses can produce\n */\nexport function Produces<T>(interceptor?: (res: Response) => any) {\n  return function(target: RESTClient, propertyKey: string, descriptor: any) {\n    descriptor.producer = (res: Response): any => {\n      let data;\n      if (interceptor) {\n        data = interceptor(res);\n      }\n      return data || <T>res.json()\n    };\n    return descriptor;\n  };\n}\n\n\n/**\n * Path variable of a method's url, type: string\n * @param {string} key - path key to bind value\n */\nexport let Path = param('Path');\n/**\n * Query value of a method's url, type: string\n * @param {string} key - query key to bind value\n */\nexport let Query = param('Query');\n/**\n * Body of a REST method, type: key-value pair object\n * Only one body per method!\n */\nexport let Body = param('Body')('Body');\n/**\n * Custom header of a REST method, type: string\n * @param {string} key - header key to bind value\n */\nexport let Header = param('Header');\n\n/**\n * GET method\n * @param {string} url - resource url of the method\n */\nexport let GET = method(RequestMethods.Get);\n/**\n * POST method\n * @param {string} url - resource url of the method\n */\nexport let POST = method(RequestMethods.Post);\n/**\n * PUT method\n * @param {string} url - resource url of the method\n */\nexport let PUT = method(RequestMethods.Put);\n/**\n * DELETE method\n * @param {string} url - resource url of the method\n */\nexport let DELETE = method(RequestMethods.Delete);\n/**\n * HEAD method\n * @param {string} url - resource url of the method\n */\nexport let HEAD = method(RequestMethods.Head);\n/**\n * PATCH method\n * @param {string} url - resource url of the method\n */\nexport let PATCH = method(RequestMethods.Patch);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}